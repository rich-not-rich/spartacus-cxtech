Stage 1 - Setup:

1. ng new cxtech --style=scss
2. cd cxtech
3. ng add @spartacus/schematics --pwa --ssr --baseUrl https://localhost:9002 --baseSite electronics-spa
4. Add folder to VS Code workspace
5. create .vscode folder
6. create settings.json file (settings.json) - you can also find this in the cloud-commerce-spartacus-storefront workspace in the .vscode folder
7. Remove redundant markup from app.component.html
8. yarn install
9. yarn start
10. http://localhost:4200

Stage 2 - Outlets:

1. From the storefront, inspect the page & demonstrate the outlet information in the source
2. Select Section1 as an outlet we would like to manipulate
3. Open app.component.html and insert outlet code (outetref.txt)
4. Go back to the browser, and observe our changes
5. ng generate module outlet
6. ng generate component outlet
7. In VS Code open the new component and module so show what was generated
8. Copy the selector name from outlet.component.ts (app-outlet)
9. Open outlet.module.ts and apply changes
10. In app.component.html change the ng-tempate body to use the selector
11. In app.module.ts add OutletModule to the imports
12. yarn start
13. Look at the updated page in the browser 

Stage 3 - Simple Routing

1. Open outlet.component.html and add link (outletroute.txt)
2. Open outlet.module.ts and add module imports for RouterModule and UrlModule
3. Go to storefront, check the new button is displayed, and confirm that clicking it goes to the PLP

Stage 4 - Custom Component:

1. From the storefront, inspect the network and load the OCC response. Check that the WeatherSlot and component are displayed.
2. ng g m weather
3. ng g c weather
4. Modify weather.module.ts from (weathermodule.txt)
5. Add WeatherModule to app.module.ts
6. ng g class default-layout-config
7. Modify layout file (default-layout-config.txt)
8. Update app.module.ts - add ConfigModule.withConfig(weatherLayoutConfig)
9. View weather component showing on page
10. Update weather.component.ts (weather-component-ts-1.txt)
11. Update weather.component.html (weather-component-html-1.txt)
12. View JSON on page
13. Update weather.component.html (weather-component-html-2.txt)

Stage 5 - Use Open Weather API:

1. ng g service services/open-weather
2. modify service (open-weather.txt)
3. modify component ts (weather-component-ts-2.txt)
4. modify component html (weather-component-3.txt)
5. Look at json displayed from open weather
6. modify component html (weather-component-4.txt)
7. Look at modified version of page

Stage 6 - Styling

1. Inspect an element in the browser and change the value for --cx-color-primary to rebeccapurple
2. Modify styles.scss (css1.txt)
3. View the changes in the browser
4. Modify styles.scss (css2.txt)
5. View the changes in the browser
6. Modify styles.scss (css3.txt)
7. View the changes in the browser
8. Modify styles.scss (css4.txt)
9. View the changes in the browser
